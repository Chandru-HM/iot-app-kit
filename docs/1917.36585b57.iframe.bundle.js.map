{"version":3,"file":"1917.36585b57.iframe.bundle.js","mappings":";;;;;;AAUA;;;;;;;;ACCA;;;;;;;;AASA;AACA;AAEA;;AAGA;;ACrBA;;AAGA;;;;;;;;ACQA;;;;AAKA;;;;AAKA;;;AAIA;;AAGA","sources":["webpack://@iot-app-kit/doc-site/../packages/react-components/dist/es/components/shared-components/StatusIcon/StatusIcon.js","webpack://@iot-app-kit/doc-site/../packages/react-components/dist/es/components/shared-components/LoadingSpinner/LoadingSpinner.js","webpack://@iot-app-kit/doc-site/../packages/react-components/dist/es/components/shared-components/ErrorBadge/ErrorBadge.js","webpack://@iot-app-kit/doc-site/../packages/react-components/dist/es/components/status/statusBase.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { STATUS_ICON_TYPE } from '@iot-app-kit/core';\nimport { getIcons } from '../../../common/iconUtils';\nconst Icon = styled.div `\n  position: relative;\n  margin-right: 3px;\n  top: 2px;\n  display: inline;\n`;\nexport const StatusIcon = ({ name = STATUS_ICON_TYPE.NORMAL, color, size }) => (React.createElement(Icon, { \"data-testid\": `status-icon-${name}` }, getIcons(name, color, size)));\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nconst fadeIn = keyframes `\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\nconst spin = keyframes `\nfrom {\n  transform: rotate(0);\n}\n\nto {\n  transform: rotate(360deg);\n}\n`;\nconst Spinner = styled.svg `\n  animation: ${spin} 900ms linear infinite, ${fadeIn} 1s linear;\n`;\nconst SpinnerSegment = styled.path `\n  fill: var(--loading-spinner-color);\n`;\nexport const LoadingSpinner = ({ size }) => (React.createElement(Spinner, { style: size != null ? { width: `${size}px`, height: `${size}px` } : {}, \"data-testid\": 'loading', viewBox: '0 0 200 200' },\n    React.createElement(\"defs\", null,\n        React.createElement(\"clipPath\", { id: 'a' },\n            React.createElement(\"path\", { d: 'M200 100a100 100 0 11-2.19-20.79l-9.78 2.08A90 90 0 10190 100z' })),\n        React.createElement(\"filter\", { id: 'b', x: '0', y: '0' },\n            React.createElement(\"feGaussianBlur\", { in: 'SourceGraphic', stdDeviation: '3' })),\n        React.createElement(SpinnerSegment, { id: 'c', d: 'M250 100a150 150 0 01-3.28 31.19L100 100z' })),\n    React.createElement(\"g\", { clipPath: 'url(#a)' },\n        React.createElement(\"g\", { filter: 'url(#b)', transform: 'rotate(-6 100 100)' },\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '0' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.03', transform: 'rotate(12 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.07', transform: 'rotate(24 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.1', transform: 'rotate(36 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.14', transform: 'rotate(48 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.17', transform: 'rotate(60 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.2', transform: 'rotate(72 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.24', transform: 'rotate(84 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.28', transform: 'rotate(96 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.31', transform: 'rotate(108 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.34', transform: 'rotate(120 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.38', transform: 'rotate(132 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.41', transform: 'rotate(144 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.45', transform: 'rotate(156 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.48', transform: 'rotate(168 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.52', transform: 'rotate(180 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.55', transform: 'rotate(192 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.59', transform: 'rotate(204 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.62', transform: 'rotate(216 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.66', transform: 'rotate(228 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.69', transform: 'rotate(240 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.7', transform: 'rotate(252 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.72', transform: 'rotate(264 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.76', transform: 'rotate(276 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.79', transform: 'rotate(288 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.83', transform: 'rotate(300 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.86', transform: 'rotate(312 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.93', transform: 'rotate(324 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', fillOpacity: '.97', transform: 'rotate(336 100 100)' }),\n            React.createElement(\"use\", { xlinkHref: '#c', transform: 'rotate(348 100 100)' })))));\n","import React from 'react';\nimport styled from 'styled-components';\nconst ErrorContainer = styled.div `\n  display: flex;\n`;\nconst WarningSymbol = styled.span `\n  padding: 3px;\n`;\nexport const ErrorBadge = ({ children }) => (React.createElement(ErrorContainer, null,\n    React.createElement(WarningSymbol, null, \"\\u26A0\"),\n    children));\n","import React from 'react';\nimport { DEFAULT_STATUS_SETTINGS, DEFAULT_STATUS_COLOR, STATUS_ICON_SHRINK_FACTOR } from './constants';\nimport { ErrorBadge, LoadingSpinner, StatusIcon, Value } from '../shared-components';\nimport { highContrastColor } from './highContrastColor';\nimport { DEFAULT_MESSAGE_OVERRIDES } from '../../common/dataTypes';\nimport omitBy from 'lodash.omitby';\nimport styled from 'styled-components';\nconst StatusWidget = styled.div `\n  display: flex;\n  height: 100%;\n  box-sizing: border-box;\n  flex-direction: column;\n  padding: var(--margin-medium);\n  font-size: var(--font-size-3);\n  line-height: var(--line-height-3);\n`;\nconst Secondary = styled.div `\n  font-size: var(--font-size-1);\n  line-height: var(--line-height-1);\n  font-weight: var(--font-weight-light);\n`;\nconst ValueContainer = styled.div `\n  font-weight: var(--font-weight-bold);\n  font-size: var(--font-size-3);\n  line-height: var(--line-height-3);\n`;\nconst Spacer = styled.div `\n  width: 4px;\n  display: inline-block;\n`;\nconst Divider = styled.div `\n  flex-grow: 1;\n`;\nexport const StatusBase = ({ icon, error, isLoading, propertyPoint, alarmPoint, unit, name, color = DEFAULT_STATUS_COLOR, settings = {}, }) => {\n    const { showName, showUnit, showValue, showIcon, fontSize } = {\n        ...DEFAULT_STATUS_SETTINGS,\n        ...omitBy(settings, (x) => x == null),\n    };\n    // Primary point to display\n    const point = alarmPoint || propertyPoint;\n    const backgroundColor = color;\n    const foregroundColor = highContrastColor(backgroundColor);\n    /** Display Settings. We want to dynamically construct the layout dependent on what information is shown */\n    const emphasizeValue = !showValue;\n    /** If anything is emphasized, then something is emphasized */\n    return (React.createElement(StatusWidget, { \"data-testid\": 'status-widget', className: 'status-widget', style: {\n            backgroundColor,\n            color: foregroundColor,\n            justifyContent: emphasizeValue ? 'center' : 'unset',\n        } },\n        showName && name,\n        error && React.createElement(ErrorBadge, null, error),\n        isLoading && React.createElement(LoadingSpinner, { size: fontSize }),\n        !emphasizeValue && !isLoading && React.createElement(Divider, null),\n        showValue && point && !isLoading && (React.createElement(\"div\", null,\n            alarmPoint && propertyPoint && (React.createElement(Secondary, { style: { color: foregroundColor } },\n                DEFAULT_MESSAGE_OVERRIDES.liveTimeFrameValueLabel,\n                \":\",\n                ' ',\n                React.createElement(Value, { value: propertyPoint ? propertyPoint.y : undefined, unit: showUnit ? unit : undefined }))),\n            React.createElement(\"div\", { style: { color: foregroundColor, display: 'flex' } },\n                showIcon && icon && (React.createElement(React.Fragment, null,\n                    React.createElement(StatusIcon, { name: icon, size: fontSize * STATUS_ICON_SHRINK_FACTOR, color: highContrastColor(backgroundColor) }),\n                    React.createElement(Spacer, null))),\n                React.createElement(ValueContainer, null,\n                    React.createElement(Value, { value: point ? point.y : undefined, unit: showUnit && alarmPoint == null ? unit : undefined })))))));\n};\n"],"names":[],"sourceRoot":""}