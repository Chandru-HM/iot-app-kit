"use strict";(self.webpackChunk_iot_app_kit_doc_site=self.webpackChunk_iot_app_kit_doc_site||[]).push([[6999],{"../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/chartScene-85752aaa.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>chartScene,u:()=>updateChartScene});var _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/getDataPoints-1a3cf1be.js"),_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/pointMesh-2249b797.js"),_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/clipSpaceConversion-3d30ad2d.js"),_common_a5fcad18_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/common-a5fcad18.js"),lineVert=function(showColor){return"\nprecision highp float;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float width;\nuniform float xPixelDensity;\nuniform float yPixelDensity;\nattribute vec2 currPoint;\nattribute vec2 nextPoint;\nattribute vec2 position;\nattribute vec3 segmentColor;\nvarying vec3 vColor;\n"+(showColor?"varying float yPositionPx;":"")+"\n\n// line shader using instanced lines\n// https://wwwtyro.net/2019/11/18/instanced-lines.html for information on this approach\nvoid main() {\n  // Convert the points to pixel coordinates - otherwise out basis vectors won't be perpendicular when\n  // rasterized to the screen.\n  vec2 currPointPx = vec2(currPoint.x / xPixelDensity, currPoint.y / yPixelDensity);\n  vec2 nextPointPx = vec2(nextPoint.x / xPixelDensity, nextPoint.y / yPixelDensity);\n\n  // create the basis vectors of a coordinate space where the x axis is parallel with\n  // the path between currPoint and nextPoint, and the y axis is perpendicular to the\n  // path between currPoint and nextPoint\n  vec2 xBasis = nextPointPx - currPointPx;\n  vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));\n\n  // project the instance segment along the basis vectors\n  vec2 positionPx = currPointPx + xBasis * position.x + yBasis * width * position.y;\n\n  // Convert from pixel coordinates back to model space\n  vec2 positionModel = vec2(positionPx.x * xPixelDensity, positionPx.y * yPixelDensity);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(positionModel, 0.0, 1.0);\n  vColor = segmentColor;\n  "+(showColor?"yPositionPx = positionPx.y;":"")+"\n}\n"},lineColorationFrag="\n// This file is only being used when we have threshold bands\n// that will break the line segments into different color\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__.M+"\n\nprecision highp float;\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float yPositionPx;\nuniform float yPixelDensity;\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = yPositionPx > thresholdBands[i].lower / yPixelDensity\n      && yPositionPx < thresholdBands[i].upper / yPixelDensity;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = yPositionPx == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color / 255.0, 1.0);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, 1.0);\n    }\n  }\n}\n",pixelDensity=function(_a){var _b=_a.viewport,end=_b.end,start=_b.start,yMax=_b.yMax,yMin=_b.yMin,toClipSpace=_a.toClipSpace,size=_a.size,width=size.width,height=size.height;return{x:Math.abs((toClipSpace(end.getTime())-toClipSpace(start.getTime()))/width),y:Math.abs((yMax-yMin)/height)}},LINE_WIDTH=_common_a5fcad18_js__WEBPACK_IMPORTED_MODULE_3__.S,updateMesh=function(dataStreams,mesh,toClipSpace){var streamVertexSets=dataStreams.filter(_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.i).map((function(stream){return(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_2__.v)(stream,stream.resolution)}));mesh.count=function(streamVertexSets){return streamVertexSets.reduce((function(totalSegments,streamVertexSet){return totalSegments+Math.max(streamVertexSet.length,0)}),0)}(streamVertexSets);var _a=mesh.geometry.attributes,currPoint=_a.currPoint,nextPoint=_a.nextPoint,segmentColor=_a.segmentColor,positionIndex=0,colorIndex=0;streamVertexSets.forEach((function(streamVertexSet){streamVertexSet.forEach((function(currVertex,vertexNum){var nextVertex=vertexNum===streamVertexSet.length-1?currVertex:streamVertexSet[vertexNum+1],currX=currVertex[0],currY=currVertex[1],r=currVertex[2],g=currVertex[3],b=currVertex[4],nextX=nextVertex[0],nextY=nextVertex[1];currPoint.array[positionIndex]=toClipSpace(currX),currPoint.array[positionIndex+1]=currY,nextPoint.array[positionIndex]=toClipSpace(nextX),nextPoint.array[positionIndex+1]=nextY,segmentColor.array[colorIndex]=r,segmentColor.array[colorIndex+1]=g,segmentColor.array[colorIndex+2]=b,colorIndex+=3,positionIndex+=2}))})),currPoint.needsUpdate=!0,nextPoint.needsUpdate=!0,segmentColor.needsUpdate=!0},segmentInstanceGeometry=[[0,-.5],[1,-.5],[1,.5],[0,-.5],[1,.5],[0,.5]],lineMesh=function(_a){var viewport=_a.viewport,dataStreams=_a.dataStreams,chartSize=_a.chartSize,minBufferSize=_a.minBufferSize,bufferFactor=_a.bufferFactor,toClipSpace=_a.toClipSpace,thresholdOptions=_a.thresholdOptions,thresholds=_a.thresholds,geometry=new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.I,bufferSize=Math.max(minBufferSize,(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_2__.n)(dataStreams)*bufferFactor);!function(geometry,bufferSize){geometry.setAttribute("position",new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.B(new Float32Array(segmentInstanceGeometry.flat()),2)),geometry.setAttribute("currPoint",new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.b(new Float32Array(2*bufferSize),2,!1)),geometry.setAttribute("nextPoint",new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.b(new Float32Array(2*bufferSize),2,!1)),geometry.setAttribute("segmentColor",new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.b(new Uint8Array(3*bufferSize),3,!0))}(geometry,bufferSize);var _b=pixelDensity({viewport,toClipSpace,size:chartSize}),xPixelDensity=_b.x,yPixelDensity=_b.y,_c=thresholdOptions.showColor,showColor=void 0===_c||_c,lineMaterial=new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.R({vertexShader:lineVert(showColor&&thresholds.length>0),fragmentShader:showColor&&0!==thresholds.length?lineColorationFrag:"\nprecision highp float;\nvarying vec3 vColor;\n\n// Fills in triangles which make up a line segment, with the corresponding color\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n",side:_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.D,transparent:!0,uniforms:{width:{value:LINE_WIDTH},xPixelDensity:{value:xPixelDensity},yPixelDensity:{value:yPixelDensity},thresholdBands:{value:(0,_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__.t)(thresholds)}}}),mesh=new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.a(geometry,lineMaterial,bufferSize);return mesh.frustumCulled=!1,updateMesh(dataStreams,mesh,toClipSpace),mesh},chartScene=function(_a){var dataStreams=_a.dataStreams,chartSize=_a.chartSize,container=_a.container,viewport=_a.viewport,minBufferSize=_a.minBufferSize,bufferFactor=_a.bufferFactor,onUpdate=_a.onUpdate,thresholdOptions=_a.thresholdOptions,thresholds=_a.thresholds,scene=new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.S,toClipSpace=(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_2__.a)(viewport),numberThresholds=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.g)(thresholds),meshList=[];return meshList[1]=lineMesh({toClipSpace,chartSize,dataStreams,viewport,minBufferSize,bufferFactor,thresholdOptions,thresholds:numberThresholds}),meshList[_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__.P]=(0,_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__.p)({dataStreams,minBufferSize,bufferFactor,toClipSpace,thresholdOptions,thresholds:numberThresholds}),meshList.forEach((function(mesh){return scene.add(mesh)})),(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_2__.c)({scene,viewport,container,toClipSpace,onUpdate})},updateChartScene=function(_a){var scene=_a.scene,dataStreams=_a.dataStreams,chartSize=_a.chartSize,container=_a.container,viewport=_a.viewport,hasDataChanged=_a.hasDataChanged,bufferFactor=_a.bufferFactor,minBufferSize=_a.minBufferSize,onUpdate=_a.onUpdate,thresholdOptions=_a.thresholdOptions,hasAnnotationChanged=_a.hasAnnotationChanged,thresholds=_a.thresholds,lines=scene.scene.children[1],points=scene.scene.children[_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__.P],isDataOverflowingBuffer=function(points){return points.geometry.attributes.position.array.length/_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__.N}(points)<(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_2__.n)(dataStreams);return isDataOverflowingBuffer||(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_2__.b)(viewport,scene.toClipSpace)||hasAnnotationChanged?chartScene({dataStreams,chartSize,container,viewport,minBufferSize,bufferFactor,onUpdate,thresholdOptions,thresholds}):(function(_a){var chartSize=_a.chartSize,toClipSpace=_a.toClipSpace,lines=_a.lines,dataStreams=_a.dataStreams,viewport=_a.viewport,hasDataChanged=_a.hasDataChanged,_b=pixelDensity({viewport,toClipSpace,size:chartSize}),xPixelDensity=_b.x,yPixelDensity=_b.y;lines.material.uniforms.xPixelDensity.value=xPixelDensity,lines.material.uniforms.yPixelDensity.value=yPixelDensity,hasDataChanged&&updateMesh(dataStreams,lines,toClipSpace)}({lines,dataStreams,chartSize,viewport,hasDataChanged,toClipSpace:scene.toClipSpace}),(0,_pointMesh_2249b797_js__WEBPACK_IMPORTED_MODULE_1__.u)(dataStreams,points,scene.toClipSpace,hasDataChanged),scene)}},"../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/common-a5fcad18.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>STROKE_WIDTH,g:()=>getDataStreamForEventing});var STROKE_WIDTH=1.5,getDataStreamForEventing=function(dataStreams){return dataStreams.map((function(dataStream){return{id:dataStream.id,name:dataStream.name,detailedName:dataStream.detailedName,color:dataStream.color,unit:dataStream.unit,dataType:dataStream.dataType,streamType:dataStream.streamType,associatedStreams:dataStream.associatedStreams,isLoading:dataStream.isLoading,isRefreshing:dataStream.isRefreshing,error:dataStream.error,resolution:dataStream.resolution}}))}},"../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/pointMesh-2249b797.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M:()=>MAX_THRESHOLD_BANDS,N:()=>NUM_POSITION_COMPONENTS,P:()=>POINT_MESH_INDEX,p:()=>pointMesh,t:()=>thresholdBands,u:()=>updatePointMesh});var _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/getDataPoints-1a3cf1be.js"),_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/clipSpaceConversion-3d30ad2d.js"),_constants_ebd051c2_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../node_modules/@iot-app-kit-visualizations/core/dist/esm-es5/constants-ebd051c2.js"),pointVert=function(showColor){return"\nvarying vec3 vColor;\n"+(showColor?"varying float positionY;":"")+"\nattribute vec3 pointColor;\nuniform float pointDiameter;\nuniform float devicePixelRatio;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, position.y, 0.0, 1.0);\n  gl_PointSize = pointDiameter * devicePixelRatio;\n  vColor = pointColor;\n  "+(showColor?"positionY = position.y;":"")+"\n}\n"},MAX_THRESHOLD_BANDS=13,thresholdBands=function(thresholds){if(0===thresholds.length)return[];var numberThresholds=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.g)(thresholds),sortedThresholds=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.s)(numberThresholds).reverse(),bands=[],thresholdBandsSet=new Set;sortedThresholds.forEach((function(threshold,index){var thresholdValue=threshold.value;if(sortedThresholds[index].comparisonOperator!==_constants_ebd051c2_js__WEBPACK_IMPORTED_MODULE_2__.a.EQUAL)if(0!==index){var prevThreshold=sortedThresholds[index-1],prevThresholdValue=prevThreshold.value,midPoint=(prevThresholdValue+thresholdValue)/2,breachedThreshold=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.e)(midPoint,sortedThresholds);if(null!=breachedThreshold&&!thresholdBandsSet.has(prevThreshold.value)){var _c=(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.g)(breachedThreshold.color);r=_c[0],g=_c[1],b=_c[2];prevThreshold.comparisonOperator===_constants_ebd051c2_js__WEBPACK_IMPORTED_MODULE_2__.a.EQUAL&&(prevThreshold.value,sortedThresholds[index].value),bands.push({upper:prevThresholdValue,lower:thresholdValue,color:[r,g,b]}),thresholdBandsSet.add(prevThreshold.value)}if(index!==sortedThresholds.length-1){var nexThresholdValue=sortedThresholds[index+1].value;if(midPoint=(thresholdValue+nexThresholdValue)/2,null!=(breachedThreshold=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.e)(midPoint,sortedThresholds))&&!thresholdBandsSet.has(thresholdValue)){var _e=(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.g)(breachedThreshold.color);r=_e[0],g=_e[1],b=_e[2];bands.push({upper:thresholdValue,lower:nexThresholdValue,color:[r,g,b]}),thresholdBandsSet.add(threshold.value)}}else if(midPoint=(thresholdValue+Number.MIN_SAFE_INTEGER)/2,null!=(breachedThreshold=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.e)(midPoint,sortedThresholds))&&!thresholdBandsSet.has(thresholdValue)){var _d=(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.g)(breachedThreshold.color);r=_d[0],g=_d[1],b=_d[2];bands.push({lower:Number.MIN_SAFE_INTEGER,upper:thresholdValue,color:[r,g,b]})}}else{var midPoint_1=(Number.MAX_SAFE_INTEGER+thresholdValue)/2,breachedThreshold_1=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.e)(midPoint_1,sortedThresholds);if(null!=breachedThreshold_1){var _b=(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.g)(breachedThreshold_1.color),r=_b[0],g=_b[1],b=_b[2];bands.push({upper:Number.MAX_SAFE_INTEGER,lower:thresholdValue,color:[r,g,b]})}}else{var _a=(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.g)(sortedThresholds[index].color),r=_a[0],g=_a[1],b=_a[2];bands.push({upper:thresholdValue,lower:thresholdValue,color:[r,g,b]})}}));for(var lastThresholdBand=bands[bands.length-1];bands.length<MAX_THRESHOLD_BANDS;){var thresholdValue=sortedThresholds[sortedThresholds.length-1].value,midPoint=Number.MIN_SAFE_INTEGER+thresholdValue/2,breachedThreshold=(0,_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.e)(midPoint,sortedThresholds);if(null==breachedThreshold)bands.push(lastThresholdBand);else{var _a=(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.g)(breachedThreshold.color),r=_a[0],g=_a[1],b=_a[2];lastThresholdBand={lower:Number.MIN_SAFE_INTEGER,upper:thresholdValue,color:[r,g,b]},bands.push(lastThresholdBand)}}return bands},colorationShaderFrag="\n#define MAX_NUM_TOTAL_THRESHOLD_BAND "+MAX_THRESHOLD_BANDS+"\n\nstruct Band {\n  float upper;\n  float lower;\n  vec3 color;\n};\n\nvarying vec3 vColor;\nvarying float positionY;\n\nuniform Band thresholdBands[MAX_NUM_TOTAL_THRESHOLD_BAND];\nuniform float yPixelDensity;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n\n  for(int i = 0; i < MAX_NUM_TOTAL_THRESHOLD_BAND; i++) {\n    bool isRangeBreached = positionY >= thresholdBands[i].lower && positionY <= thresholdBands[i].upper;\n    bool isEqualsThreshold = thresholdBands[i].lower == thresholdBands[i].upper;\n    bool isEqualsThresholdBreached = positionY == thresholdBands[i].upper;\n\n    if (isRangeBreached || (isEqualsThreshold && isEqualsThresholdBreached)) {\n       gl_FragColor = vec4(thresholdBands[i].color /255.0, alpha);\n       break;\n    } else {\n       gl_FragColor = vec4(vColor, alpha);\n    }\n  }\n}\n",POINT_MESH_INDEX=0,pointDiameter=function(dataStreams){return 0===(null!=dataStreams[0]?dataStreams[0].resolution:null)?4:6.25},NUM_POSITION_COMPONENTS=2,updateGeometry=function(geometry,dataStreams,toClipSpace){var allVertices=dataStreams.filter(_getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.i).map((function(stream){return(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.v)(stream,stream.resolution)})).flat(),_a=geometry.attributes,position=_a.position,pointColor=_a.pointColor;allVertices.forEach((function(_a,i){var x=_a[0],y=_a[1],r=_a[2],g=_a[3],b=_a[4];position.array[i*NUM_POSITION_COMPONENTS]=toClipSpace(x),position.array[i*NUM_POSITION_COMPONENTS+1]=y,pointColor.array[3*i]=r,pointColor.array[3*i+1]=g,pointColor.array[3*i+2]=b})),geometry.setDrawRange(0,allVertices.length),position.needsUpdate=!0,pointColor.needsUpdate=!0},pointMesh=function(_a){var toClipSpace=_a.toClipSpace,dataStreams=_a.dataStreams,minBufferSize=_a.minBufferSize,bufferFactor=_a.bufferFactor,thresholdOptions=_a.thresholdOptions,thresholds=_a.thresholds,bufferSize=Math.max(minBufferSize,(0,_clipSpaceConversion_3d30ad2d_js__WEBPACK_IMPORTED_MODULE_1__.n)(dataStreams)*bufferFactor),geometry=new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.f;!function(geometry,bufferSize){geometry.setAttribute("position",new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.B(new Float32Array(bufferSize*NUM_POSITION_COMPONENTS),NUM_POSITION_COMPONENTS)),geometry.setAttribute("pointColor",new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.B(new Uint8Array(3*bufferSize),3,!0))}(geometry,bufferSize),updateGeometry(geometry,dataStreams,toClipSpace);var _b=thresholdOptions.showColor,showColor=void 0===_b||_b,material=new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.h({vertexShader:pointVert(showColor&&thresholds.length>0),fragmentShader:showColor&&0!==thresholds.length?colorationShaderFrag:"\nvarying vec3 vColor;\n\nvoid main() {\n  // calculate position such that the center is (0, 0) in a region of [-1, 1] x [-1, 1]\n  vec2 pos = 2.0 * gl_PointCoord.xy - 1.0;\n  // r = distance squared from the origin of the point being rendered\n  float r = dot(pos, pos);\n  if (r > 1.0) {\n    discard;\n  }\n  float alpha = 1.0 - smoothstep(0.5, 1.0, sqrt(r));\n  gl_FragColor = vec4(vColor, alpha);\n}\n",transparent:!0,uniforms:{pointDiameter:{value:pointDiameter(dataStreams)},devicePixelRatio:{value:window.devicePixelRatio},thresholdBands:{value:thresholdBands(thresholds)}}}),points=new _getDataPoints_1a3cf1be_js__WEBPACK_IMPORTED_MODULE_0__.P(geometry,material);return points.frustumCulled=!1,points},updatePointMesh=function(dataStreams,points,toClipSpace,hasDataChanged){void 0===hasDataChanged&&(hasDataChanged=!0),points.material.uniforms.pointDiameter.value=pointDiameter(dataStreams),points.material.uniforms.devicePixelRatio.value=window.devicePixelRatio,hasDataChanged&&updateGeometry(points.geometry,dataStreams,toClipSpace)}}}]);